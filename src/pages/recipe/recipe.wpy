<template>
  <view>
    <image src="{{cover}}" mode="scaleToFill" style="width:750rpx;height:750rpx;">
    <view class="pv-20 bg-white">
      <view class="text-indent">{{recipe.description}}</view>
    </view>
    <wux-cell-group title="材料">
      <wux-cell wx:for="{{material}}" title="{{item.name}}" extra="{{item.quantity}}"></wux-cell>
    </wux-cell-group>
    <view class="p-20 c666">制作步骤：</view>
    <view>
      <myTabs :currentIndex.sync="currentIndex" :swiperList.sync="step"/>
    </view>
    <view style="margin-bottom:150rpx;">
      <mySwiper
        :currentIndex.sync="currentIndex"
        :swiperList.sync="step"
        @swiperChange.user="swiperChange"
        swiperHeight="600rpx"
      ></mySwiper>
    </view>
    <view class="flex footer">
      <view class="flex-grow wux-balanced--bg">
        <button class="fs-36" open-type="share">分享</button>
      </view>
      <view class="flex-grow {{collected?'wux-assertive--bg':'wux-energized--bg'}}">
        <button @tap="tapCollect" class="fs-36">{{collected?'取消收藏':'添加收藏'}}</button>
      </view>
    </view>
  </view>
</template>

<script>
// button,icon,input,cell
import wepy from 'wepy';
import api from '@/api/api';
import tip from '@/utils/tip';
import { tabs } from '@/utils/tabs';
import { parseTime } from '@/utils/util';

import mySwiper from '@/components/swiper';
import myTabs from '@/components/tabs';
export default class recipe extends wepy.page {
  config = {
    navigationBarTitleText: '菜谱',
    usingComponents: {
      'jvc-media': '../../wux/jvc_media/index',
      'wux-search-bar': '../../wux/search-bar/index',
      'wux-tabs': '../../wux/tabs/index',
      'wux-tab': '../../wux/tab/index',
      'wux-badge': '../../wux/badge/index',
      'wux-cell-group': '../../wux/cell-group/index',
      'wux-cell': '../../wux/cell/index'
    }
  };
  components = {
    mySwiper: mySwiper,
    myTabs: myTabs
  };

  data = {
    recipeId: '',
    recipe: {},
    collected: false,
    material: [],
    step: [],
    currentIndex: 0,
    cover: ''
  };

  computed = {};

  methods = {
    tapCollect() {
      if (this.collected) {
        let arr = this.parse('recipe') || [];

        wepy.setStorageSync(
          'recipe',
          JSON.stringify(arr.filter(a => a.id != this.recipeId))
        );
      } else {
        let arr = this.parse('recipe') || [];
        arr.push({
          id: this.recipeId,
          title: this.recipe.title,
          cover: this.cover,
          mainingredient: this.recipe.recipeIngredient.join(','),
          username: this.recipe.author.name || '',
          dateline: parseTime(this.recipe.pubDate, '{y}-{m}-{d} {h}:{i}')
        });
        console.log(JSON.stringify(arr));
        wepy.setStorageSync('recipe', JSON.stringify(arr));
      }
      this.collected = !this.collected;
      this.$apply();
    },
    onConfirm() {},
    onClear() {},
    swiperChange(e) {
      console.log(e);
      // let { current } = e.detail;
      // this.currentIndex = current;
    },
    onTabsChange(e) {
      const { key } = e.detail;
      this.currentIndex = 1 * key;
    }
  };

  events = {};
  onBottom;
  parse(key) {
    let val = null;
    try {
      val = JSON.parse(wepy.getStorageSync(key));
    } catch (error) {}
    return val;
  }
  onLoad({ id }) {
    let arr = this.parse('recipe') || [];
    console.log(arr);
    this.recipeId = id;
    this.collected = Boolean(arr.findIndex(a => a.id === this.recipeId) != -1);

    wepy.showShareMenu({ withShareTicket: true });
    this.getRecipeById();
  }
  async getRecipeById() {
    tip.loading();
    let obj = {
      id: this.recipeId
    };
    let res = await api.get(`/getRecipeById`, obj);
    console.log(res.data);
    this.recipe = res.data;
    this.cover = this.recipe.image.split('?')[0] || '';
    wepy.setNavigationBarTitle({ title: this.recipe.title });

    this.material = this.recipe.data.Cookbook.material;
    this.step = this.recipe.data.Cookbook.step;
    this.$apply();
    tip.loaded();
  }
  onTabChange() {}
}
</script>

<style lang="less">
.header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  background: #fff;
}
.footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  line-height: 100rpx;
  text-align: center;
  background: white;
  button {
    color: #fff;
    border: none;
    background: none;

    border-radius: none;
  }
  button::after {
    border: none;
  }
}
</style>
